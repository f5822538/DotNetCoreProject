{{#unless AuthType0}}
using Base.Enums;
{{/unless}}
using Base.Models;
using Base.Services;
{{#unless AuthType0}}
using BaseWeb.Attributes;
{{/unless}}
using BaseApi.Controllers;
using BaseWeb.Services;
using {{Project}}.Services;
{{#if HasFile}}
using Microsoft.AspNetCore.Http;
{{/if}}
using Microsoft.AspNetCore.Mvc;
{{#if HasFile}}
using System.Collections.Generic;
{{/if}}
using System.Threading.Tasks;

namespace {{Project}}.Controllers
{
    {{#if AuthType1}}
    [XgProgAuth]
    {{/if}}
    public class {{ProgCode}}Controller : ApiCtrl
    {
        {{#if AuthType2}}
        [XgProgAuth(CrudEnum.Read)]
        {{/if}}
        {{#if HasSelect}}
        public async Task<ActionResult> Read()
        {{else}}
        public ActionResult Read()
        {{/if}}
        {
	        {{#if ReadSelectCols}}
			//for read view
		        {{#each ReadSelectCols}}
			ViewBag.{{this}} = await _XpCode.Get{{this}}Async();
		        {{/each}}
	        {{/if}}
	        {{#if EditSelectCols}}
			//for edit view
		        {{#each EditSelectCols}}
			ViewBag.{{this}} = await _XpCode.Get{{this}}Async();
		        {{/each}}
	        {{/if}}
            return View();
        }

        [HttpPost]
        {{#if AuthType2}}
        [XgProgAuth(CrudEnum.Read)]
        {{/if}}
        public async Task<ContentResult> GetPage(DtDto dt)
        {
            return JsonToCnt(await new {{ProgCode}}Read().GetPage(Ctrl, dt));
        }

        private {{ProgCode}}Edit EditService()
        {
            return new {{ProgCode}}Edit(Ctrl);
        }

        {{#if HasUpdate}}
        [HttpPost]
            {{#if AuthType2}}
        [XgProgAuth(CrudEnum.Update)]
            {{/if}}
        public async Task<ContentResult> GetUpdJson(string key)
        {
            return JsonToCnt(await EditService().GetUpdJsonAsync(key));
        }
        {{/if}}

        {{#if HasView}}
        [HttpPost]
            {{#if AuthType2}}
        [XgProgAuth(CrudEnum.View)]
            {{/if}}
        public async Task<ContentResult> GetViewJson(string key)
        {
            return JsonToCnt(await EditService().GetViewJsonAsync(key));
        }
        {{/if}}

        {{#if HasFile}}
            {{#if HasCreate}}
        [HttpPost]
                {{#if AuthType2}}
        [XgProgAuth(CrudEnum.Create)]
                {{/if}}
        //TODO: add your code, tSn_fid ex: t03_FileName
        public async Task<JsonResult> Create(string json, List<IFormFile> t03_FileName)
        {
            return Json(await EditService().CreateAsnyc(_Str.ToJson(json), t03_FileName));
        }
            {{/if}}

            {{#if HasUpdate}}
        [HttpPost]
                {{#if AuthType2}}
        [XgProgAuth(CrudEnum.Update)]
                {{/if}}
        //TODO: add your code, tSn_fid ex: t03_FileName
        public async Task<JsonResult> Update(string key, string json, List<IFormFile> t03_FileName)
        {
            return Json(await EditService().UpdateAsnyc(key, _Str.ToJson(json), t03_FileName));
        }
            {{/if}}

            {{#if HasView}}
        //TODO: add your code
        //get file/image
                {{#if AuthType2}}
        [XgProgAuth(CrudEnum.View)]
                {{/if}}
        public async Task<FileResult> ViewFile(string table, string fid, string key, string ext)
        {
            return await _Xp.ViewFile(fid, key, ext);
        }
            {{/if}}
        {{else}}
            {{#if HasCreate}}
        [HttpPost]
                {{#if AuthType2}}
        [XgProgAuth(CrudEnum.Create)]
                {{/if}}
        public async Task<JsonResult> Create(string json)
        {
            return Json(await EditService().CreateAsync(_Str.ToJson(json)));
        }
            {{/if}}

            {{#if HasUpdate}}
        [HttpPost]
                {{#if AuthType2}}
        [XgProgAuth(CrudEnum.Update)]
                {{/if}}
        public async Task<JsonResult> Update(string key, string json)
        {
            return Json(await EditService().UpdateAsync(key, _Str.ToJson(json)));
        }
            {{/if}}
        {{/if}}

        {{#if HasDelete}}
        [HttpPost]
            {{#if AuthType2}}
        [XgProgAuth(CrudEnum.Delete)]
            {{/if}}
        public async Task<JsonResult> Delete(string key)
        {
            return Json(await EditService().DeleteAsync(key));
        }
        {{/if}}

        {{#if HasExport}}
        [HttpPost]
            {{#if AuthType2}}
        [XgProgAuth(CrudEnum.Export)]
            {{/if}}
        public async Task Export(string find)
        {
            await new {{ProgCode}}Read().ExportAsync(Ctrl, _Str.ToJson(find));
        }
        {{/if}}

    }//class
}